{"ast":null,"code":"import _asyncToGenerator from \"/Volumes/Drive/documents/croppers/croppers-new/App_code/User-Web-Version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./util.service\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(util) {\n      this.util = util;\n      this.cart = [];\n      this.itemId = [];\n      this.totalPrice = 0;\n      this.grandTotal = 0;\n      this.discount = 0;\n      this.orderTax = 0;\n      this.shippingPrice = 0;\n      this.minOrderPrice = 0;\n      this.freeShipping = 0;\n      this.deliveryPrice = 0;\n      this.stores = [];\n      this.userOrderTaxByStores = [];\n      this.walletDiscount = 0;\n      const data = localStorage.getItem('cart');\n\n      if (data && data != null && data != 'null') {\n        const userCart = JSON.parse(data);\n\n        if (userCart && userCart.length > 0) {\n          this.cart = userCart;\n          this.itemId = [...new Set(this.cart.map(item => item.id))];\n          this.calcuate();\n        } else {\n          this.calcuate();\n        }\n      } else {\n        this.calcuate();\n      }\n    }\n\n    clearCartAlert() {\n      var _this = this;\n\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          Swal.fire({\n            title: _this.util.translate('Warning'),\n            text: _this.util.translate(\"You already have item's in cart with different grocery store\"),\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: _this.util.translate('Clear Cart')\n          }).then(result => {\n            console.log(result);\n\n            if (result.isConfirmed) {\n              _this.clearCart();\n\n              resolve(true);\n            } else {\n              resolve(false);\n            }\n          });\n        });\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    clearCart() {\n      this.cart = [];\n      this.itemId = [];\n      this.totalPrice = 0;\n      this.grandTotal = 0;\n      this.coupon = undefined;\n      this.discount = 0;\n      this.orderPrice = 0;\n      this.datetime = undefined;\n      this.stores = [];\n      this.deliveryAddress = null;\n      this.shippingPrice = 0;\n      this.walletDiscount = 0;\n      this.deliveryPrice = 0;\n      this.util.clearKeys('cart');\n    }\n\n    addItem(item) {\n      console.log('item to adde', item);\n      this.cart.push(item);\n      this.itemId.push(item.id);\n      this.calcuate();\n    }\n\n    addQuantity(quantity, id) {\n      console.log('iddd-->>', id);\n      console.log('quantity', quantity);\n      this.cart.forEach(element => {\n        if (element.id == id) {\n          element.quantiy = quantity;\n        }\n      });\n      this.calcuate();\n    }\n\n    removeItem(id) {\n      console.log('remove this item from cart');\n      console.log('current cart items', this.cart);\n      this.cart = this.cart.filter(x => x.id != id);\n      this.itemId = this.itemId.filter(x => x != id);\n      console.log('===>>>>>>>>>', this.cart);\n      console.log('items===>>>', this.itemId);\n\n      if (this.cart.length) {\n        this.calcuate();\n      } else {\n        this.clearCart();\n      }\n    }\n\n    calcuate() {\n      var _this2 = this;\n\n      this.userOrderTaxByStores = [];\n      let total = 0;\n      this.cart.forEach(element => {\n        if (element && element.discount === 0) {\n          if (element.size === '1' || element.size === 1) {\n            if (element.variations[0].items[element.variant].discount && element.variations[0].items[element.variant].discount !== 0) {\n              total = total + parseFloat(element.variations[0].items[element.variant].discount) * element.quantiy;\n            } else {\n              total = total + parseFloat(element.variations[0].items[element.variant].price) * element.quantiy;\n            }\n          } else {\n            total = total + parseFloat(element.original_price) * element.quantiy;\n          }\n        } else {\n          if (element.size === '1' || element.size === 1) {\n            if (element.variations[0].items[element.variant].discount && element.variations[0].items[element.variant].discount !== 0) {\n              total = total + parseFloat(element.variations[0].items[element.variant].discount) * element.quantiy;\n            } else {\n              total = total + parseFloat(element.variations[0].items[element.variant].price) * element.quantiy;\n            }\n          } else {\n            total = total + parseFloat(element.sell_price) * element.quantiy;\n          }\n        }\n      });\n      console.log('total->', total);\n      this.totalPrice = total;\n\n      if (this.coupon && this.coupon.type) {\n        const min = parseFloat(this.coupon.min);\n\n        if (this.totalPrice >= min) {\n          if (this.coupon && this.coupon.type === 'per') {\n            console.log('per');\n\n            function percentage(num, per) {\n              return num / 100 * per;\n            }\n\n            const totalPrice = percentage(parseFloat(this.totalPrice).toFixed(2), parseFloat(this.coupon.off));\n            console.log('============>>>>>>>>>>>>>>>', totalPrice);\n            this.discount = totalPrice.toFixed(2); // this.grandTotal = (this.totalPrice - parseFloat(this.discount)) + this.orderTax;\n          } else {\n            console.log('currency');\n            this.discount = this.coupon.off; // this.grandTotal = (this.totalPrice - parseFloat(this.discount)) + this.orderTax;\n          }\n        } else {\n          this.discount = 0;\n          this.coupon = null;\n        }\n      } else {\n        this.grandTotal = this.totalPrice + this.orderTax;\n\n        if (this.grandTotal <= this.walletDiscount) {\n          this.walletDiscount = this.grandTotal;\n          this.grandTotal = this.grandTotal - this.walletDiscount;\n        } else {\n          this.grandTotal = this.grandTotal - this.walletDiscount;\n        }\n\n        this.grandTotal = parseFloat(this.grandTotal).toFixed(2);\n      }\n\n      if (this.stores && this.stores.length && this.deliveryAddress && this.deliveryAt === 'home') {\n        console.log('--->>> delivery address===>>>', this.deliveryAddress); // this.deliveryPrice = 0;\n\n        let totalKM = 0;\n        let taxEach = 0;\n        this.stores.forEach( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (element) {\n            const distance = yield _this2.distanceInKmBetweenEarthCoordinates(_this2.deliveryAddress.lat, _this2.deliveryAddress.lng, element.lat, element.lng);\n            console.log('distance', distance, element);\n            totalKM = totalKM + distance;\n            console.log('total->', element.name, totalKM * _this2.shippingPrice); // const storeCount = this.stores.length + 1;\n\n            taxEach = _this2.orderTax / _this2.stores.length;\n            const extraChargeParam = {\n              store_id: element.uid,\n              distance: distance.toFixed(2),\n              tax: taxEach.toFixed(2),\n              shipping: _this2.shipping,\n              shippingPrice: _this2.shippingPrice\n            };\n            console.log(extraChargeParam);\n\n            _this2.userOrderTaxByStores.push(extraChargeParam);\n          });\n\n          return function (_x3) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n        console.log('00-->>', this.userOrderTaxByStores);\n        setTimeout(() => {\n          console.log('free', this.freeShipping);\n          console.log('totalprice', this.totalPrice);\n\n          if (this.freeShipping > this.totalPrice) {\n            if (this.shipping === 'km') {\n              const distancePricer = totalKM * this.shippingPrice;\n              console.log('====================> KM price', Math.abs(distancePricer));\n              this.deliveryPrice = Math.floor(distancePricer).toFixed(2);\n\n              if (!this.discount || this.discount === null) {\n                this.discount = 0;\n              }\n\n              this.grandTotal = this.totalPrice - parseFloat(this.discount) + this.orderTax + distancePricer;\n              this.grandTotal = parseFloat(this.grandTotal).toFixed(2);\n\n              if (this.grandTotal <= this.walletDiscount) {\n                this.walletDiscount = this.grandTotal;\n                this.grandTotal = this.grandTotal - this.walletDiscount;\n              } else {\n                this.grandTotal = this.grandTotal - this.walletDiscount;\n              }\n\n              this.grandTotal = parseFloat(this.grandTotal).toFixed(2);\n              console.log('grand total===>>', this.grandTotal); // console.log('deliveryeeeeeeeee', this.deliveryPrice);\n            } else {\n              this.deliveryPrice = this.shippingPrice;\n              console.log('shippppppppp=-======0-00-=-=', this.shippingPrice);\n\n              if (!this.discount || this.discount === null) {\n                this.discount = 0;\n              }\n\n              this.grandTotal = this.totalPrice - parseFloat(this.discount) + this.orderTax + this.shippingPrice;\n              this.grandTotal = parseFloat(this.grandTotal).toFixed(2);\n\n              if (this.grandTotal <= this.walletDiscount) {\n                this.walletDiscount = this.grandTotal;\n                this.grandTotal = this.grandTotal - this.walletDiscount;\n              } else {\n                this.grandTotal = this.grandTotal - this.walletDiscount;\n              }\n\n              this.grandTotal = parseFloat(this.grandTotal).toFixed(2);\n              console.log('grand total===>>', this.grandTotal);\n            }\n          } else {\n            this.deliveryPrice = 0;\n            console.log('discount', this.discount);\n\n            if (!this.discount || this.discount === null) {\n              this.discount = 0;\n            }\n\n            console.log('order tax', this.orderTax);\n            this.grandTotal = this.totalPrice - parseFloat(this.discount) + this.orderTax;\n            this.grandTotal = parseFloat(this.grandTotal).toFixed(2);\n\n            if (this.grandTotal <= this.walletDiscount) {\n              this.walletDiscount = this.grandTotal;\n              this.grandTotal = this.grandTotal - this.walletDiscount;\n            } else {\n              this.grandTotal = this.grandTotal - this.walletDiscount;\n            }\n\n            this.grandTotal = parseFloat(this.grandTotal).toFixed(2);\n            console.log('grand total===>>', this.grandTotal);\n          }\n        }, 1000);\n      } else {\n        console.log('no store,no delivery address, no shipping price valid');\n        let taxEach = 0;\n        this.stores.forEach( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (element) {\n            taxEach = _this2.orderTax / _this2.stores.length;\n            const extraChargeParam = {\n              store_id: element.uid,\n              distance: 0,\n              tax: taxEach.toFixed(2),\n              shipping: _this2.shipping,\n              shippingPrice: _this2.shippingPrice\n            };\n            console.log(extraChargeParam);\n\n            _this2.userOrderTaxByStores.push(extraChargeParam);\n          });\n\n          return function (_x4) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n        console.log('extra delivery paarammmmm----<<<', this.userOrderTaxByStores);\n        this.deliveryPrice = 0;\n        this.discount = this.discount === null || this.discount === 0 || !this.discount ? 0 : this.discount;\n        this.grandTotal = this.totalPrice - parseFloat(this.discount) + parseFloat(this.orderTax);\n        this.grandTotal = parseFloat(this.grandTotal).toFixed(2);\n\n        if (this.grandTotal <= this.walletDiscount) {\n          this.walletDiscount = this.grandTotal;\n          this.grandTotal = this.grandTotal - this.walletDiscount;\n        } else {\n          this.grandTotal = this.grandTotal - this.walletDiscount;\n        }\n\n        this.grandTotal = parseFloat(this.grandTotal).toFixed(2);\n        console.log('grand total===>>', this.grandTotal);\n      }\n\n      this.util.setKeys('cart', JSON.stringify(this.cart));\n    }\n\n    checkProductInCart(id) {\n      return this.itemId.includes(id);\n    }\n\n    degreesToRadians(degrees) {\n      return degrees * Math.PI / 180;\n    }\n\n    distanceInKmBetweenEarthCoordinates(lat1, lon1, lat2, lon2) {\n      console.log(lat1, lon1, lat2, lon2);\n      const earthRadiusKm = 6371;\n      const dLat = this.degreesToRadians(lat2 - lat1);\n      const dLon = this.degreesToRadians(lon2 - lon1);\n      lat1 = this.degreesToRadians(lat1);\n      lat2 = this.degreesToRadians(lat2);\n      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return earthRadiusKm * c;\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.UtilService));\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}