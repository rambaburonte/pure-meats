{"ast":null,"code":"import { Injectable, ɵɵdefineInjectable, Component, Input, EventEmitter, ComponentFactoryResolver, ChangeDetectorRef, NgZone, ElementRef, Renderer2, ViewChild, ViewContainerRef, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate, group } from '@angular/animations';\nimport { Observable, Subject } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = function (a0, a1) {\n  return [a0, a1];\n};\n\nfunction ToasterContainerComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function ToasterContainerComponent_div_1_Template_div_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3);\n      const toast_r1 = restoredCtx.$implicit;\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.click(toast_r1);\n    })(\"clickEvent\", function ToasterContainerComponent_div_1_Template_div_clickEvent_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.childClick($event);\n    })(\"removeToastEvent\", function ToasterContainerComponent_div_1_Template_div_removeToastEvent_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.removeToast($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const toast_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"toast\", toast_r1)(\"toasterconfig\", ctx_r0.toasterconfig)(\"@toastState\", ctx_r0.toasterconfig.animation)(\"titleClass\", ctx_r0.toasterconfig.titleClass)(\"messageClass\", ctx_r0.toasterconfig.messageClass)(\"ngClass\", ɵngcc0.ɵɵpureFunction2(6, _c0, ctx_r0.toasterconfig.iconClasses[toast_r1.type], ctx_r0.toasterconfig.typeClasses[toast_r1.type]));\n  }\n}\n\nconst _c1 = function (a0) {\n  return [a0];\n};\n\nconst _c2 = [\"componentBody\"];\nconst _c3 = [\"toastComp\", \"\"];\n\nfunction ToastComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", null, 7);\n  }\n}\n\nfunction ToastComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 8);\n    ɵngcc0.ɵɵpipe(1, \"trustHtml\");\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r1.toast.body), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.toast.body);\n  }\n}\n\nfunction ToastComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 9);\n    ɵngcc0.ɵɵlistener(\"click\", function ToastComponent_button_7_Template_button_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.click($event, ctx_r6.toast);\n    });\n    ɵngcc0.ɵɵpipe(1, \"trustHtml\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r3.toast.closeHtml), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelement(1, \"div\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r4.progressBarWidth + \"%\");\n  }\n}\n\nconst Transitions = [trigger('toastState', [state('flyRight, flyLeft, slideDown, slideDown, slideUp, slideUp, fade', style({\n  opacity: 1,\n  transform: 'translate(0,0)'\n})), transition('void => flyRight', [style({\n  opacity: 0,\n  transform: 'translateX(100%)',\n  height: 0\n}), animate('0.15s ease-in', style({\n  opacity: 1,\n  height: '*'\n})), animate('0.25s 15ms ease-in')]), transition('flyRight => void', [animate('0.25s ease-out', style({\n  opacity: 0,\n  transform: 'translateX(100%)'\n})), animate('0.15s ease-out', style({\n  height: 0\n}))]), transition('void => flyLeft', [style({\n  opacity: 0,\n  transform: 'translateX(-100%)',\n  height: 0\n}), animate('0.15s ease-in', style({\n  opacity: 1,\n  height: '*'\n})), animate('0.25s 15ms ease-in')]), transition('flyLeft => void', [animate('0.25s 10ms ease-out', style({\n  opacity: 0,\n  transform: 'translateX(-100%)'\n})), animate('0.15s ease-out', style({\n  height: 0\n}))]), transition('void => slideDown', [style({\n  opacity: 0,\n  transform: 'translateY(-500%)',\n  height: 0\n}), group([animate('0.2s ease-in', style({\n  height: '*'\n})), animate('0.4s ease-in', style({\n  transform: 'translate(0,0)'\n})), animate('0.3s 0.1s ease-in', style({\n  opacity: 1\n}))])]), transition('slideDown => void', group([animate('0.3s ease-out', style({\n  opacity: 0\n})), animate('0.4s ease-out', style({\n  transform: 'translateY(-500%)'\n})), animate('0.2s 0.2s ease-out', style({\n  height: 0\n}))])), transition('void => slideUp', [style({\n  opacity: 0,\n  transform: 'translateY(1000%)',\n  height: 0\n}), group([animate('0.2s ease-in', style({\n  height: '*'\n})), animate('0.5s ease-in', style({\n  transform: 'translate(0,0)'\n})), animate('0.3s 0.1s ease-in', style({\n  opacity: 1\n}))])]), transition('slideUp => void', group([animate('0.3s ease-out', style({\n  opacity: 0\n})), animate('0.5s ease-out', style({\n  transform: 'translateY(1000%)'\n})), animate('0.3s 0.15s ease-out', style({\n  height: 0\n}))])), transition('void => fade', [style({\n  opacity: 0,\n  height: 0\n}), animate('0.20s ease-in', style({\n  height: '*'\n})), animate('0.15s ease-in', style({\n  opacity: 1\n}))]), transition('fade => void', [group([animate('0.0s ease-out', style({\n  // reposition the background to prevent\n  // a ghost image during transition\n  'background-position': '-99999px'\n})), animate('0.15s ease-out', style({\n  opacity: 0,\n  'background-image': ''\n})), animate('0.3s 20ms ease-out', style({\n  height: 0\n}))])])])];\nvar BodyOutputType = /*#__PURE__*/(() => {\n  (function (BodyOutputType) {\n    BodyOutputType[BodyOutputType[\"Default\"] = 0] = \"Default\";\n    BodyOutputType[BodyOutputType[\"TrustedHtml\"] = 1] = \"TrustedHtml\";\n    BodyOutputType[BodyOutputType[\"Component\"] = 2] = \"Component\";\n  })(BodyOutputType || (BodyOutputType = {}));\n\n  return BodyOutputType;\n})();\nconst DefaultTypeClasses = {\n  error: 'toast-error',\n  info: 'toast-info',\n  wait: 'toast-wait',\n  success: 'toast-success',\n  warning: 'toast-warning'\n};\nconst DefaultIconClasses = {\n  error: 'icon-error',\n  info: 'icon-info',\n  wait: 'icon-wait',\n  success: 'icon-success',\n  warning: 'icon-warning'\n};\nlet ToasterConfig = /*#__PURE__*/(() => {\n  class ToasterConfig {\n    constructor(configOverrides) {\n      configOverrides = configOverrides || {};\n      this.limit = configOverrides.limit || null;\n      this.tapToDismiss = configOverrides.tapToDismiss != null ? configOverrides.tapToDismiss : true;\n      this.showCloseButton = configOverrides.showCloseButton != null ? configOverrides.showCloseButton : false;\n      this.closeHtml = configOverrides.closeHtml || '<span>&times;</span>';\n      this.newestOnTop = configOverrides.newestOnTop != null ? configOverrides.newestOnTop : true;\n      this.timeout = configOverrides.timeout != null ? configOverrides.timeout : 5000;\n      this.typeClasses = configOverrides.typeClasses || DefaultTypeClasses;\n      this.iconClasses = configOverrides.iconClasses || DefaultIconClasses;\n      this.bodyOutputType = configOverrides.bodyOutputType || BodyOutputType.Default;\n      this.bodyTemplate = configOverrides.bodyTemplate || 'toasterBodyTmpl.html';\n      this.defaultToastType = configOverrides.defaultToastType || 'info';\n      this.positionClass = configOverrides.positionClass || 'toast-top-right';\n      this.titleClass = configOverrides.titleClass || 'toast-title';\n      this.messageClass = configOverrides.messageClass || 'toast-message';\n      this.animation = configOverrides.animation || '';\n      this.preventDuplicates = configOverrides.preventDuplicates != null ? configOverrides.preventDuplicates : false;\n      this.mouseoverTimerStop = configOverrides.mouseoverTimerStop != null ? configOverrides.mouseoverTimerStop : false;\n      this.toastContainerId = configOverrides.toastContainerId != null ? configOverrides.toastContainerId : null;\n    }\n\n  }\n\n  ToasterConfig.ɵfac = function ToasterConfig_Factory(t) {\n    return new (t || ToasterConfig)(ɵngcc0.ɵɵinject(undefined));\n  };\n\n  ToasterConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ToasterConfig,\n    factory: ToasterConfig.ɵfac\n  });\n  return ToasterConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // http://stackoverflow.com/questions/26501688/a-typescript-guid-class\n\n\nclass Guid {\n  static newGuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      const r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n\n}\n\nlet ToasterService = /*#__PURE__*/(() => {\n  class ToasterService {\n    /**\n     * Creates an instance of ToasterService.\n     */\n    constructor() {\n      this.addToast = new Observable(observer => this._addToast = observer).pipe(share());\n      this.clearToasts = new Observable(observer => this._clearToasts = observer).pipe(share());\n      this._removeToastSubject = new Subject();\n      this.removeToast = this._removeToastSubject.pipe(share());\n    }\n    /**\n     * Synchronously create and show a new toast instance.\n     *\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\n     * @param {string=} title The toast title.\n     * @param {string=} body The toast body.\n     * @returns {Toast}\n     *          The newly created Toast instance with a randomly generated GUID Id.\n     */\n\n\n    pop(type, title, body) {\n      const toast = typeof type === 'string' ? {\n        type: type,\n        title: title,\n        body: body\n      } : type;\n\n      if (!toast.toastId) {\n        toast.toastId = Guid.newGuid();\n      }\n\n      if (!this._addToast) {\n        throw new Error('No Toaster Containers have been initialized to receive toasts.');\n      }\n\n      this._addToast.next(toast);\n\n      return toast;\n    }\n    /**\n     * Asynchronously create and show a new toast instance.\n     *\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\n     * @param {string=} title The toast title.\n     * @param {string=} body The toast body.\n     * @returns {Observable<Toast>}\n     *          A hot Observable that can be subscribed to in order to receive the Toast instance\n     *          with a randomly generated GUID Id.\n     */\n\n\n    popAsync(type, title, body) {\n      setTimeout(() => {\n        this.pop(type, title, body);\n      }, 0);\n      return this.addToast;\n    }\n    /**\n     * Clears a toast by toastId and/or toastContainerId.\n     *\n     * @param {string} toastId The toastId to clear.\n     * @param {number=} toastContainerId\n     *        The toastContainerId of the container to remove toasts from.\n     */\n\n\n    clear(toastId, toastContainerId) {\n      const clearWrapper = {\n        toastId: toastId,\n        toastContainerId: toastContainerId\n      };\n\n      this._clearToasts.next(clearWrapper);\n    }\n\n  }\n\n  ToasterService.ɵfac = function ToasterService_Factory(t) {\n    return new (t || ToasterService)();\n  };\n\n  ToasterService.ɵprov = ɵɵdefineInjectable({\n    factory: function ToasterService_Factory() {\n      return new ToasterService();\n    },\n    token: ToasterService,\n    providedIn: \"root\"\n  });\n  return ToasterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ToasterContainerComponent = /*#__PURE__*/(() => {\n  class ToasterContainerComponent {\n    constructor(toasterService) {\n      this.toasts = [];\n      this.toasterService = toasterService;\n    }\n\n    ngOnInit() {\n      this.registerSubscribers();\n\n      if (this.isNullOrUndefined(this.toasterconfig)) {\n        this.toasterconfig = new ToasterConfig();\n      }\n    } // event handlers\n\n\n    click(toast, isCloseButton) {\n      if (toast.onClickCallback) {\n        toast.onClickCallback(toast);\n      }\n\n      const tapToDismiss = !this.isNullOrUndefined(toast.tapToDismiss) ? toast.tapToDismiss : this.toasterconfig.tapToDismiss;\n\n      if (tapToDismiss || toast.showCloseButton && isCloseButton) {\n        this.removeToast(toast);\n      }\n    }\n\n    childClick($event) {\n      this.click($event.value.toast, $event.value.isCloseButton);\n    }\n\n    removeToast(toast) {\n      const index = this.toasts.indexOf(toast);\n\n      if (index < 0) {\n        return;\n      }\n\n      ;\n      const toastId = this.toastIdOrDefault(toast);\n      this.toasts.splice(index, 1);\n\n      if (toast.onHideCallback) {\n        toast.onHideCallback(toast);\n      }\n\n      this.toasterService._removeToastSubject.next({\n        toastId: toastId,\n        toastContainerId: toast.toastContainerId\n      });\n    } // private functions\n\n\n    registerSubscribers() {\n      this.addToastSubscriber = this.toasterService.addToast.subscribe(toast => {\n        this.addToast(toast);\n      });\n      this.clearToastsSubscriber = this.toasterService.clearToasts.subscribe(clearWrapper => {\n        this.clearToasts(clearWrapper);\n      });\n    }\n\n    addToast(toast) {\n      if (toast.toastContainerId && this.toasterconfig.toastContainerId && toast.toastContainerId !== this.toasterconfig.toastContainerId) {\n        return;\n      }\n\n      ;\n\n      if (!toast.type || !this.toasterconfig.typeClasses[toast.type] || !this.toasterconfig.iconClasses[toast.type]) {\n        toast.type = this.toasterconfig.defaultToastType;\n      }\n\n      if (this.toasterconfig.preventDuplicates && this.toasts.length > 0) {\n        if (toast.toastId && this.toasts.some(t => t.toastId === toast.toastId)) {\n          return;\n        } else if (this.toasts.some(t => t.body === toast.body)) {\n          return;\n        }\n      }\n\n      if (this.isNullOrUndefined(toast.showCloseButton)) {\n        if (typeof this.toasterconfig.showCloseButton === 'object') {\n          toast.showCloseButton = this.toasterconfig.showCloseButton[toast.type];\n        } else if (typeof this.toasterconfig.showCloseButton === 'boolean') {\n          toast.showCloseButton = this.toasterconfig.showCloseButton;\n        }\n      }\n\n      if (toast.showCloseButton) {\n        toast.closeHtml = toast.closeHtml || this.toasterconfig.closeHtml;\n      }\n\n      toast.bodyOutputType = toast.bodyOutputType || this.toasterconfig.bodyOutputType;\n\n      if (this.toasterconfig.newestOnTop) {\n        this.toasts.unshift(toast);\n\n        if (this.isLimitExceeded()) {\n          this.toasts.pop();\n        }\n      } else {\n        this.toasts.push(toast);\n\n        if (this.isLimitExceeded()) {\n          this.toasts.shift();\n        }\n      }\n\n      if (toast.onShowCallback) {\n        toast.onShowCallback(toast);\n      }\n    }\n\n    isLimitExceeded() {\n      return this.toasterconfig.limit && this.toasts.length > this.toasterconfig.limit;\n    }\n\n    removeAllToasts() {\n      for (let i = this.toasts.length - 1; i >= 0; i--) {\n        this.removeToast(this.toasts[i]);\n      }\n    }\n\n    clearToasts(clearWrapper) {\n      const toastId = clearWrapper.toastId;\n      const toastContainerId = clearWrapper.toastContainerId;\n\n      if (this.isNullOrUndefined(toastContainerId) || toastContainerId === this.toasterconfig.toastContainerId) {\n        this.clearToastsAction(toastId);\n      }\n    }\n\n    clearToastsAction(toastId) {\n      if (toastId) {\n        this.removeToast(this.toasts.filter(t => t.toastId === toastId)[0]);\n      } else {\n        this.removeAllToasts();\n      }\n    }\n\n    toastIdOrDefault(toast) {\n      return toast.toastId || '';\n    }\n\n    isNullOrUndefined(value) {\n      return value === null || typeof value === 'undefined';\n    }\n\n    ngOnDestroy() {\n      if (this.addToastSubscriber) {\n        this.addToastSubscriber.unsubscribe();\n      }\n\n      if (this.clearToastsSubscriber) {\n        this.clearToastsSubscriber.unsubscribe();\n      }\n    }\n\n  }\n\n  ToasterContainerComponent.ɵfac = function ToasterContainerComponent_Factory(t) {\n    return new (t || ToasterContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ToasterService));\n  };\n\n  ToasterContainerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ToasterContainerComponent,\n    selectors: [[\"toaster-container\"]],\n    inputs: {\n      toasterconfig: \"toasterconfig\"\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[1, \"toast-container\", 3, \"ngClass\"], [\"toastComp\", \"\", \"class\", \"toast\", 3, \"toast\", \"toasterconfig\", \"titleClass\", \"messageClass\", \"ngClass\", \"click\", \"clickEvent\", \"removeToastEvent\", 4, \"ngFor\", \"ngForOf\"], [\"toastComp\", \"\", 1, \"toast\", 3, \"toast\", \"toasterconfig\", \"titleClass\", \"messageClass\", \"ngClass\", \"click\", \"clickEvent\", \"removeToastEvent\"]],\n    template: function ToasterContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, ToasterContainerComponent_div_1_Template, 1, 9, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx.toasterconfig.positionClass));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.toasts);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgClass, ɵngcc1.NgForOf, ToastComponent];\n    },\n    encapsulation: 2,\n    data: {\n      animation: Transitions\n    }\n  });\n  return ToasterContainerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ToastComponent = /*#__PURE__*/(() => {\n  class ToastComponent {\n    constructor(componentFactoryResolver, changeDetectorRef, ngZone, element, renderer2) {\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.changeDetectorRef = changeDetectorRef;\n      this.ngZone = ngZone;\n      this.element = element;\n      this.renderer2 = renderer2;\n      this.progressBarWidth = -1;\n      this.bodyOutputType = BodyOutputType;\n      this.clickEvent = new EventEmitter();\n      this.removeToastEvent = new EventEmitter();\n      this.timeoutId = null;\n      this.timeout = 0;\n      this.progressBarIntervalId = null;\n    }\n\n    ngOnInit() {\n      if (this.toast.progressBar) {\n        this.toast.progressBarDirection = this.toast.progressBarDirection || 'decreasing';\n      }\n\n      let timeout = typeof this.toast.timeout === 'number' ? this.toast.timeout : this.toasterconfig.timeout;\n\n      if (typeof timeout === 'object') {\n        timeout = timeout[this.toast.type];\n      }\n\n      ;\n      this.timeout = timeout;\n    }\n\n    ngAfterViewInit() {\n      if (this.toast.bodyOutputType === this.bodyOutputType.Component) {\n        const component = this.componentFactoryResolver.resolveComponentFactory(this.toast.body);\n        const componentInstance = this.componentBody.createComponent(component, undefined, this.componentBody.injector);\n        componentInstance.instance.toast = this.toast;\n        this.changeDetectorRef.detectChanges();\n      }\n\n      if (this.toasterconfig.mouseoverTimerStop) {\n        // only apply a mouseenter event when necessary to avoid\n        // unnecessary event and change detection cycles.\n        this.removeMouseOverListener = this.renderer2.listen(this.element.nativeElement, 'mouseenter', () => this.stopTimer());\n      }\n\n      this.configureTimer();\n    }\n\n    click(event, toast) {\n      event.stopPropagation();\n      this.clickEvent.emit({\n        value: {\n          toast: toast,\n          isCloseButton: true\n        }\n      });\n    }\n\n    stopTimer() {\n      this.progressBarWidth = 0;\n      this.clearTimers();\n    }\n\n    restartTimer() {\n      if (this.toasterconfig.mouseoverTimerStop) {\n        if (!this.timeoutId) {\n          this.configureTimer();\n        }\n      } else if (this.timeout && !this.timeoutId) {\n        this.removeToast();\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.removeMouseOverListener) {\n        this.removeMouseOverListener();\n      }\n\n      this.clearTimers();\n    }\n\n    configureTimer() {\n      if (!this.timeout || this.timeout < 1) {\n        return;\n      }\n\n      if (this.toast.progressBar) {\n        this.removeToastTick = new Date().getTime() + this.timeout;\n        this.progressBarWidth = -1;\n      }\n\n      this.ngZone.runOutsideAngular(() => {\n        this.timeoutId = window.setTimeout(() => {\n          this.ngZone.run(() => {\n            this.changeDetectorRef.markForCheck();\n            this.removeToast();\n          });\n        }, this.timeout);\n\n        if (this.toast.progressBar) {\n          this.progressBarIntervalId = window.setInterval(() => {\n            this.ngZone.run(() => {\n              this.updateProgressBar();\n            });\n          }, 10);\n        }\n      });\n    }\n\n    updateProgressBar() {\n      if (this.progressBarWidth === 0 || this.progressBarWidth === 100) {\n        return;\n      }\n\n      this.progressBarWidth = (this.removeToastTick - new Date().getTime()) / this.timeout * 100;\n\n      if (this.toast.progressBarDirection === 'increasing') {\n        this.progressBarWidth = 100 - this.progressBarWidth;\n      }\n\n      if (this.progressBarWidth < 0) {\n        this.progressBarWidth = 0;\n      }\n\n      if (this.progressBarWidth > 100) {\n        this.progressBarWidth = 100;\n      }\n    }\n\n    clearTimers() {\n      if (this.timeoutId) {\n        window.clearTimeout(this.timeoutId);\n      }\n\n      if (this.progressBarIntervalId) {\n        window.clearInterval(this.progressBarIntervalId);\n      }\n\n      this.timeoutId = null;\n      this.progressBarIntervalId = null;\n    }\n\n    removeToast() {\n      this.removeToastEvent.emit(this.toast);\n    }\n\n  }\n\n  ToastComponent.ɵfac = function ToastComponent_Factory(t) {\n    return new (t || ToastComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  ToastComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ToastComponent,\n    selectors: [[\"\", \"toastComp\", \"\"]],\n    viewQuery: function ToastComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, 5, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.componentBody = _t.first);\n      }\n    },\n    hostBindings: function ToastComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseleave\", function ToastComponent_mouseleave_HostBindingHandler() {\n          return ctx.restartTimer();\n        });\n      }\n    },\n    inputs: {\n      toasterconfig: \"toasterconfig\",\n      toast: \"toast\",\n      titleClass: \"titleClass\",\n      messageClass: \"messageClass\"\n    },\n    outputs: {\n      clickEvent: \"clickEvent\",\n      removeToastEvent: \"removeToastEvent\"\n    },\n    attrs: _c3,\n    decls: 9,\n    vars: 9,\n    consts: [[1, \"toast-content\"], [3, \"ngClass\"], [3, \"ngClass\", \"ngSwitch\"], [4, \"ngSwitchCase\"], [3, \"innerHTML\", 4, \"ngSwitchCase\"], [\"class\", \"toast-close-button\", 3, \"innerHTML\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [\"componentBody\", \"\"], [3, \"innerHTML\"], [1, \"toast-close-button\", 3, \"innerHTML\", \"click\"], [1, \"toast-progress-bar\"]],\n    template: function ToastComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, ToastComponent_div_4_Template, 2, 0, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(5, ToastComponent_div_5_Template, 2, 3, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(6, ToastComponent_div_6_Template, 2, 1, \"div\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, ToastComponent_button_7_Template, 2, 3, \"button\", 5);\n        ɵngcc0.ɵɵtemplate(8, ToastComponent_div_8_Template, 2, 2, \"div\", 6);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.titleClass);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.toast.title);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.messageClass)(\"ngSwitch\", ctx.toast.bodyOutputType);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx.bodyOutputType.Component);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx.bodyOutputType.TrustedHtml);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx.bodyOutputType.Default);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toast.showCloseButton);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toast.progressBar);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgClass, ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgIf];\n    },\n    pipes: function () {\n      return [TrustHtmlPipe];\n    },\n    encapsulation: 2\n  });\n  return ToastComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TrustHtmlPipe = /*#__PURE__*/(() => {\n  class TrustHtmlPipe {\n    constructor(sanitizer) {\n      this.sanitizer = sanitizer;\n    }\n\n    transform(content) {\n      return this.sanitizer.bypassSecurityTrustHtml(content);\n    }\n\n  }\n\n  TrustHtmlPipe.ɵfac = function TrustHtmlPipe_Factory(t) {\n    return new (t || TrustHtmlPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomSanitizer, 16));\n  };\n\n  TrustHtmlPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"trustHtml\",\n    type: TrustHtmlPipe,\n    pure: true\n  });\n  return TrustHtmlPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ToasterModule = /*#__PURE__*/(() => {\n  class ToasterModule {\n    static forRoot() {\n      return {\n        ngModule: ToasterModule,\n        providers: [ToasterService, ToasterContainerComponent]\n      };\n    }\n\n    static forChild() {\n      return {\n        ngModule: ToasterModule,\n        providers: [ToasterContainerComponent]\n      };\n    }\n\n  }\n\n  ToasterModule.ɵfac = function ToasterModule_Factory(t) {\n    return new (t || ToasterModule)();\n  };\n\n  ToasterModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ToasterModule\n  });\n  ToasterModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ToasterModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToasterModule, {\n    declarations: function () {\n      return [ToastComponent, ToasterContainerComponent, TrustHtmlPipe];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ToasterContainerComponent, ToastComponent];\n    }\n  });\n})();\n/*\n * Public API Surface of angular2-toaster\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BodyOutputType, DefaultIconClasses, DefaultTypeClasses, ToasterConfig, ToasterContainerComponent, ToasterModule, ToasterService, Transitions as ɵa, ToastComponent as ɵb, TrustHtmlPipe as ɵc }; //# sourceMappingURL=angular2-toaster.js.map","map":null,"metadata":{},"sourceType":"module"}