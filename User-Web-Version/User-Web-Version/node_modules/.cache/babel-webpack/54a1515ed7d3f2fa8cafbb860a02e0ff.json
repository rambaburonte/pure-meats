{"ast":null,"code":"import _asyncToGenerator from \"/Volumes/Drive/documents/croppers/croppers-new/App_code/User-Web-Version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/auth\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, fireAuth) {\n      this.http = http;\n      this.fireAuth = fireAuth;\n      this.baseUrl = '';\n      this.mediaURL = '';\n      this.baseUrl = environment.baseUrl;\n      this.mediaURL = environment.imageUrl;\n    }\n\n    signInWithPhoneNumber(recaptchaVerifier, phoneNumber) {\n      return new Promise((resolve, reject) => {\n        console.log(phoneNumber);\n        this.fireAuth.signInWithPhoneNumber(phoneNumber, recaptchaVerifier).then(confirmationResult => {\n          this.confirmationResult = confirmationResult;\n          resolve(confirmationResult);\n        }).catch(error => {\n          console.log(error);\n          reject('SMS not sent');\n        });\n      });\n    }\n\n    enterVerificationCode(code) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          _this.confirmationResult.confirm(code).then( /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator(function* (result) {\n              console.log(result);\n              const user = result.user;\n              resolve(user);\n            });\n\n            return function (_x) {\n              return _ref.apply(this, arguments);\n            };\n          }()).catch(error => {\n            reject(error.message);\n          });\n        });\n      })();\n    }\n\n    uploadFile(files) {\n      var formData = new FormData();\n      Array.from(files).forEach(f => formData.append('image', f));\n      return this.http.post(this.baseUrl + 'v1/' + 'uploadImage', formData);\n    }\n\n    JSON_to_URLEncoded(element, key, list) {\n      let new_list = list || [];\n\n      if (typeof element === 'object') {\n        for (let idx in element) {\n          this.JSON_to_URLEncoded(element[idx], key ? key + '[' + idx + ']' : idx, new_list);\n        }\n      } else {\n        new_list.push(key + '=' + encodeURIComponent(element));\n      }\n\n      return new_list.join('&');\n    }\n\n    post_public(url, body) {\n      return new Promise((resolve, reject) => {\n        const header = {\n          headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n        };\n        const param = this.JSON_to_URLEncoded(body);\n        console.log(param);\n        this.http.post(this.baseUrl + url, param, header).subscribe(data => {\n          resolve(data);\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n\n    post_private(url, body) {\n      return new Promise((resolve, reject) => {\n        const header = {\n          headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', `Bearer ${localStorage.getItem('token')}`)\n        };\n        const param = this.JSON_to_URLEncoded(body);\n        console.log(param);\n        this.http.post(this.baseUrl + url, param, header).subscribe(data => {\n          resolve(data);\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n\n    post_temp(url, body, temp) {\n      return new Promise((resolve, reject) => {\n        const header = {\n          headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', `Bearer ${temp}`)\n        };\n        const param = this.JSON_to_URLEncoded(body);\n        console.log(param);\n        this.http.post(this.baseUrl + url, param, header).subscribe(data => {\n          resolve(data);\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n\n    get_public(url) {\n      return new Promise((resolve, reject) => {\n        const header = {\n          headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n        };\n        this.http.get(this.baseUrl + url, header).subscribe(data => {\n          resolve(data);\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n\n    get_private(url) {\n      return new Promise((resolve, reject) => {\n        const header = {\n          headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', `Bearer ${localStorage.getItem('token')}`)\n        };\n        this.http.get(this.baseUrl + url, header).subscribe(data => {\n          resolve(data);\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n\n    externalGet(url) {\n      return new Promise((resolve, reject) => {\n        const header = {\n          headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n        };\n        this.http.get(url, header).subscribe(data => {\n          resolve(data);\n        }, error => {\n          reject(error);\n        });\n      });\n    }\n\n    httpGet(url, key) {\n      const header = {\n        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', `Bearer ${key}`)\n      };\n      return this.http.get(url, header);\n    }\n\n    externalPost(url, body, key) {\n      const header = {\n        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', `Bearer ${key}`)\n      };\n      const order = this.JSON_to_URLEncoded(body);\n      console.log(order);\n      return this.http.post(url, order, header);\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireAuth));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}