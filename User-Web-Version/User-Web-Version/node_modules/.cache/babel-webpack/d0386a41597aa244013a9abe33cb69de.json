{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"angular2-toaster\";\nimport * as i3 from \"ngx-ui-loader\";\nexport let UtilService = /*#__PURE__*/(() => {\n  class UtilService {\n    constructor(router, toasterService, ngxService) {\n      this.router = router;\n      this.toasterService = toasterService;\n      this.ngxService = ngxService;\n      this.isLoading = false;\n      this.servingCities = [];\n      this.appLogo = '';\n      this.user_login_with = 0;\n      this.user_verification = 0;\n      this.default_country_code = '';\n      this.app_status = 1;\n      this.app_color = 1;\n      this.findType = 0;\n      this.makeOrders = 0;\n      this.reset_pwd = 0;\n      this.address = new Subject();\n      this.coupon = new Subject();\n      this.review = new Subject();\n      this.changeLocation = new Subject();\n      this.loggedIn = new Subject();\n      this.profile = new Subject();\n      this.newOrder = new Subject();\n      this.appPage = [];\n      this.appClosed = false;\n      this.appClosedMessage = '';\n      this.havepopup = false;\n      this.translations = [];\n      this.selectedCity = new BehaviorSubject([]);\n      this.cartBtn = new Subject();\n      this.popupRX = new Subject();\n      this.smsGateway = '0';\n      this.deviceType = 'desktop';\n      this.dummyProducts = [];\n      this.favIds = [];\n      this.haveFav = false;\n      this.modalPopup = new Subject();\n      this.updatePriceOfCart = new Subject();\n      this.locationPicker = new Subject();\n      this.paymentLeavve = new Subject();\n      this.countrys = [];\n      this.user_login = '0';\n      this.home_type = '0';\n      this.active_store = [];\n      this.allLanguages = [];\n      this.headerCategories = [];\n      this.savedLanguages = '';\n      this.social = {\n        fb: '#',\n        insta: '#',\n        twitter: '#',\n        linkedIn: '#',\n        googlePlay: '#',\n        appleStore: '#'\n      };\n      this.selectedCityName = '';\n      this.default_delivery_zip = '';\n      this.default_city_id = '';\n      this.deliveredAddress = '';\n      this.deliveryZipCode = '';\n    }\n\n    publishAddress(data) {\n      this.address.next(data);\n    }\n\n    publishNewOrder() {\n      this.newOrder.next();\n    }\n\n    publishModalPopup(data) {\n      this.modalPopup.next(data);\n    }\n\n    subscribeModalPopup() {\n      return this.modalPopup;\n    }\n\n    publishLocatioPicker() {\n      this.locationPicker.next();\n    }\n\n    subscribeLocationPicker() {\n      return this.locationPicker;\n    }\n\n    publishPriceOfCart() {\n      this.updatePriceOfCart.next();\n    }\n\n    getPriceOfCart() {\n      return this.updatePriceOfCart;\n    }\n\n    updatePaymentIssue() {\n      this.paymentLeavve.next();\n    }\n\n    changeIntevert() {\n      return this.paymentLeavve;\n    }\n\n    publishPopup() {\n      this.popupRX.next();\n    }\n\n    getPopup() {\n      return this.popupRX;\n    }\n\n    publishCartBtn() {\n      this.cartBtn.next();\n    }\n\n    subscribeCartBtn() {\n      return this.cartBtn;\n    }\n\n    toast(type, title, msg) {\n      this.toasterService.pop(type, title, msg);\n    }\n\n    subscribeOrder() {\n      return this.newOrder;\n    }\n\n    translate(str) {\n      if (this.translations[str]) {\n        return this.translations[str];\n      }\n\n      return str;\n    }\n\n    publishReview(data) {\n      this.review.next(data);\n    }\n\n    publishProfile(data) {\n      this.profile.next(data);\n    }\n\n    observProfile() {\n      return this.profile;\n    }\n\n    getReviewObservable() {\n      return this.review;\n    }\n\n    publishLocation(data) {\n      this.changeLocation.next(data);\n    }\n\n    subscribeLocation() {\n      return this.changeLocation;\n    }\n\n    setFav(id) {\n      this.favIds.push(id);\n    }\n\n    removeFav(id) {\n      this.favIds = this.favIds.filter(x => x != id);\n    }\n\n    publishLoggedIn(data) {\n      this.loggedIn.next(data);\n    }\n\n    subscribeLoggedIn() {\n      return this.loggedIn;\n    }\n\n    publishCity(data) {\n      this.selectedCity.next(data);\n    }\n\n    subscribeCity() {\n      return this.selectedCity;\n    }\n\n    getObservable() {\n      return this.address;\n    }\n\n    publishCoupon(data) {\n      this.coupon.next(data);\n    }\n\n    getCouponObservable() {\n      return this.coupon;\n    }\n\n    setOrders(data) {\n      this.orders = null;\n      this.orders = data;\n    }\n\n    getKeys(key) {\n      return new Promise((resolve, reject) => {\n        try {\n          resolve(localStorage.getItem(key));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    clearKeys(key) {\n      localStorage.removeItem(key);\n    }\n\n    setKeys(key, value) {\n      return new Promise((resolve, reject) => {\n        try {\n          resolve(localStorage.setItem(key, value));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    gerOrder() {\n      return this.orders;\n    }\n\n    errorMessage(str) {\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'bottom-end',\n        showConfirmButton: false,\n        timer: 3000,\n        timerProgressBar: true\n      });\n      Toast.fire({\n        icon: 'error',\n        title: this.translate(str)\n      });\n    }\n\n    suucessMessage(str) {\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'bottom-end',\n        showConfirmButton: false,\n        timer: 3000,\n        timerProgressBar: true\n      });\n      Toast.fire({\n        icon: 'success',\n        title: this.translate(str)\n      });\n    }\n\n    makeid(length) {\n      let result = '';\n      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      const charactersLength = characters.length;\n\n      for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    }\n\n    start() {\n      this.ngxService.start();\n    }\n\n    stop() {\n      this.ngxService.stop();\n    }\n\n    apiErrorHandler(err) {\n      // console.log('Error got in service =>', err)\n      if (err && err.status === 401 && err.error.error) {\n        this.errorMessage(err.error.error);\n        this.publishModalPopup('login');\n        return false;\n      }\n\n      if (err && err.status === 500 && err.error.error) {\n        this.errorMessage(err.error.error);\n        return false;\n      }\n\n      if (err.status === -1) {\n        this.errorMessage('Failed To Connect With Server');\n      } else if (err.status === 401) {\n        this.errorMessage('Unauthorized Request!');\n        localStorage.removeItem('token');\n        localStorage.removeItem('uid');\n        this.publishModalPopup('login');\n      } else if (err.status === 500) {\n        this.errorMessage('Somethimg Went Wrong');\n      } else if (err.status === 422 && err.error.error) {\n        this.errorMessage(err.error.error);\n      } else {\n        this.errorMessage('Something went wrong');\n      }\n    }\n\n    loadScript(url) {\n      const body = document.body;\n      const script = document.createElement('script');\n      script.innerHTML = '';\n      script.src = url;\n      script.async = false;\n      script.defer = true;\n      body.appendChild(script);\n    }\n\n  }\n\n  UtilService.ɵfac = function UtilService_Factory(t) {\n    return new (t || UtilService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToasterService), i0.ɵɵinject(i3.NgxUiLoaderService));\n  };\n\n  UtilService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtilService,\n    factory: UtilService.ɵfac,\n    providedIn: 'root'\n  });\n  return UtilService;\n})();","map":null,"metadata":{},"sourceType":"module"}