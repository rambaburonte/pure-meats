{"ast":null,"code":"import { Pipe, EventEmitter, Component, Input, Output, Directive, ElementRef, Renderer2, NgModule } from '@angular/core';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction NgOtpInputComponent_div_0_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"input\", 3);\n    ɵngcc0.ɵɵlistener(\"keydown\", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r4.onKeyDown($event);\n    })(\"keyup\", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r6.onKeyUp($event, i_r3);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"otp-input \", ctx_r1.config.inputClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate2(\"id\", \"otp_\", i_r3, \"_\", ctx_r1.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"pattern\", ctx_r1.config.allowNumbersOnly ? \"\\\\d*\" : \"\")(\"type\", ctx_r1.inputType)(\"placeholder\", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || \"\")(\"disabledNumberOnly\", !ctx_r1.config.allowNumbersOnly)(\"ngStyle\", ctx_r1.config.inputStyles)(\"formControl\", ctx_r1.otpForm.controls[item_r2]);\n  }\n}\n\nfunction NgOtpInputComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 1, 11, \"input\", 2);\n    ɵngcc0.ɵɵpipe(2, \"keys\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"wrapper \", ctx_r0.config.containerClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate1(\"id\", \"c_\", ctx_r0.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.config.containerStyles);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));\n  }\n}\n\nlet KeysPipe = /*#__PURE__*/(() => {\n  class KeysPipe {\n    transform(value) {\n      return Object.keys(value);\n    }\n\n  }\n\n  KeysPipe.ɵfac = function KeysPipe_Factory(t) {\n    return new (t || KeysPipe)();\n  };\n\n  KeysPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"keys\",\n    type: KeysPipe,\n    pure: true\n  });\n  return KeysPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass Config {}\n\nlet NgOtpInputComponent = /*#__PURE__*/(() => {\n  class NgOtpInputComponent {\n    constructor(keysPipe) {\n      this.keysPipe = keysPipe;\n      this.config = {\n        length: 4\n      }; // tslint:disable-next-line: no-output-on-prefix\n\n      this.onInputChange = new EventEmitter();\n      this.inputControls = new Array(this.config.length);\n      this.componentKey = Math.random().toString(36).substring(2) + new Date().getTime().toString(36);\n    }\n\n    ngOnInit() {\n      this.otpForm = new FormGroup({});\n\n      for (let index = 0; index < this.config.length; index++) {\n        this.otpForm.addControl(this.getControlName(index), new FormControl());\n      }\n\n      this.otpForm.valueChanges.subscribe(v => {\n        this.keysPipe.transform(this.otpForm.controls).forEach(k => {\n          var val = this.otpForm.controls[k].value;\n\n          if (val && val.length > 1) {\n            if (val.length >= this.config.length) {\n              this.setValue(val);\n            } else {\n              this.rebuildValue();\n            }\n          }\n        });\n      });\n      this.inputType = this.getInputType();\n    }\n\n    ngAfterViewInit() {\n      if (!this.config.disableAutoFocus) {\n        const containerItem = document.getElementById(`c_${this.componentKey}`);\n\n        if (containerItem) {\n          containerItem.addEventListener('paste', evt => this.handlePaste(evt));\n          const ele = containerItem.getElementsByClassName('otp-input')[0];\n\n          if (ele && ele.focus) {\n            ele.focus();\n          }\n        }\n      }\n    }\n\n    getControlName(idx) {\n      return `ctrl_${idx}`;\n    }\n\n    ifLeftArrow(event) {\n      return this.ifKeyCode(event, 37);\n    }\n\n    ifRightArrow(event) {\n      return this.ifKeyCode(event, 39);\n    }\n\n    ifBackspaceOrDelete(event) {\n      return event.key === 'Backspace' || event.key === 'Delete' || this.ifKeyCode(event, 8) || this.ifKeyCode(event, 46);\n    }\n\n    ifKeyCode(event, targetCode) {\n      const key = event.keyCode || event.charCode; // tslint:disable-next-line: triple-equals\n\n      return key == targetCode ? true : false;\n    }\n\n    onKeyDown($event) {\n      var isSpace = this.ifKeyCode($event, 32);\n\n      if (isSpace) {\n        // prevent space\n        return false;\n      }\n    }\n\n    onKeyUp($event, inputIdx) {\n      const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\n      const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\n\n      if (this.ifRightArrow($event)) {\n        this.setSelected(nextInputId);\n        return;\n      }\n\n      if (this.ifLeftArrow($event)) {\n        this.setSelected(prevInputId);\n        return;\n      }\n\n      const isBackspace = this.ifBackspaceOrDelete($event);\n\n      if (isBackspace && !$event.target.value) {\n        this.setSelected(prevInputId);\n        this.rebuildValue();\n        return;\n      }\n\n      if (!$event.target.value) {\n        return;\n      }\n\n      if (this.ifValidEntry($event)) {\n        this.setSelected(nextInputId);\n      }\n\n      this.rebuildValue();\n    }\n\n    appendKey(id) {\n      return `${id}_${this.componentKey}`;\n    }\n\n    setSelected(eleId) {\n      this.focusTo(eleId);\n      const ele = document.getElementById(eleId);\n\n      if (ele && ele.setSelectionRange) {\n        setTimeout(() => {\n          ele.setSelectionRange(0, 1);\n        }, 0);\n      }\n    }\n\n    ifValidEntry(event) {\n      const inp = String.fromCharCode(event.keyCode);\n      const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n      return isMobile || /[a-zA-Z0-9-_]/.test(inp) || this.config.allowKeyCodes && this.config.allowKeyCodes.includes(event.keyCode) || event.keyCode >= 96 && event.keyCode <= 105;\n    }\n\n    focusTo(eleId) {\n      const ele = document.getElementById(eleId);\n\n      if (ele) {\n        ele.focus();\n      }\n    } // method to set component value\n\n\n    setValue(value) {\n      if (this.config.allowNumbersOnly && isNaN(value)) {\n        return;\n      }\n\n      this.otpForm.reset();\n\n      if (!value) {\n        this.rebuildValue();\n        return;\n      }\n\n      value = value.toString().replace(/\\s/g, ''); // remove whitespace\n\n      Array.from(value).forEach((c, idx) => {\n        if (this.otpForm.get(this.getControlName(idx))) {\n          this.otpForm.get(this.getControlName(idx)).setValue(c);\n        }\n      });\n\n      if (!this.config.disableAutoFocus) {\n        const containerItem = document.getElementById(`c_${this.componentKey}`);\n        var indexOfElementToFocus = value.length < this.config.length ? value.length : this.config.length - 1;\n        let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\n\n        if (ele && ele.focus) {\n          ele.focus();\n        }\n      }\n\n      this.rebuildValue();\n    }\n\n    rebuildValue() {\n      let val = '';\n      this.keysPipe.transform(this.otpForm.controls).forEach(k => {\n        if (this.otpForm.controls[k].value) {\n          let ctrlVal = this.otpForm.controls[k].value;\n          let isLengthExceed = ctrlVal.length > 1;\n          let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\n          ctrlVal = ctrlVal[0];\n          let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\n\n          if (isCaseTransformEnabled && transformedVal == ctrlVal) {\n            isCaseTransformEnabled = false;\n          } else {\n            ctrlVal = transformedVal;\n          }\n\n          val += ctrlVal;\n\n          if (isLengthExceed || isCaseTransformEnabled) {\n            this.otpForm.controls[k].setValue(ctrlVal);\n          }\n        }\n      });\n      this.onInputChange.emit(val);\n    }\n\n    getInputType() {\n      return this.config.isPasswordInput ? 'password' : this.config.allowNumbersOnly ? 'tel' : 'text';\n    }\n\n    handlePaste(e) {\n      // Get pasted data via clipboard API\n      let clipboardData = e.clipboardData || window['clipboardData'];\n\n      if (clipboardData) {\n        var pastedData = clipboardData.getData('Text');\n      } // Stop data actually being pasted into div\n\n\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (!pastedData) {\n        return;\n      }\n\n      this.setValue(pastedData);\n    }\n\n  }\n\n  NgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) {\n    return new (t || NgOtpInputComponent)(ɵngcc0.ɵɵdirectiveInject(KeysPipe));\n  };\n\n  NgOtpInputComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgOtpInputComponent,\n    selectors: [[\"ng-otp-input\"]],\n    inputs: {\n      config: \"config\"\n    },\n    outputs: {\n      onInputChange: \"onInputChange\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"class\", \"id\", \"ngStyle\", 4, \"ngIf\"], [3, \"id\", \"ngStyle\"], [\"numberOnly\", \"\", \"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"class\", \"formControl\", \"id\", \"keydown\", \"keyup\", 4, \"ngFor\", \"ngForOf\"], [\"numberOnly\", \"\", \"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"formControl\", \"id\", \"keydown\", \"keyup\"]],\n    template: function NgOtpInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.otpForm == null ? null : ctx.otpForm.controls);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc2.DefaultValueAccessor, NumberOnlyDirective, ɵngcc2.PatternValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective];\n    },\n    pipes: function () {\n      return [KeysPipe];\n    },\n    styles: [\".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}\"]\n  });\n  /**\r\n   * @type {function(): !Array<(null|{\r\n   *   type: ?,\r\n   *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n   * })>}\r\n   * @nocollapse\r\n   */\n\n  return NgOtpInputComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NumberOnlyDirective = /*#__PURE__*/(() => {\n  class NumberOnlyDirective {\n    constructor(_elRef, _renderer) {\n      this._elRef = _elRef;\n      this._renderer = _renderer;\n    }\n\n    ngOnInit() {\n      if (!this.disabledNumberOnly) {\n        this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');\n      }\n    }\n\n  }\n\n  NumberOnlyDirective.ɵfac = function NumberOnlyDirective_Factory(t) {\n    return new (t || NumberOnlyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  NumberOnlyDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NumberOnlyDirective,\n    selectors: [[\"\", \"numberOnly\", \"\"]],\n    inputs: {\n      disabledNumberOnly: \"disabledNumberOnly\"\n    }\n  });\n  /**\r\n   * @type {function(): !Array<(null|{\r\n   *   type: ?,\r\n   *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n   * })>}\r\n   * @nocollapse\r\n   */\n\n  return NumberOnlyDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgOtpInputModule = /*#__PURE__*/(() => {\n  class NgOtpInputModule {}\n\n  NgOtpInputModule.ɵfac = function NgOtpInputModule_Factory(t) {\n    return new (t || NgOtpInputModule)();\n  };\n\n  NgOtpInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgOtpInputModule\n  });\n  NgOtpInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [KeysPipe],\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule]]\n  });\n  return NgOtpInputModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOtpInputModule, {\n    declarations: function () {\n      return [NgOtpInputComponent, KeysPipe, NumberOnlyDirective];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ReactiveFormsModule];\n    },\n    exports: function () {\n      return [NgOtpInputComponent];\n    }\n  });\n})();\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgOtpInputComponent, NgOtpInputModule, KeysPipe as ɵa, NumberOnlyDirective as ɵb }; //# sourceMappingURL=ng-otp-input.js.map","map":null,"metadata":{},"sourceType":"module"}