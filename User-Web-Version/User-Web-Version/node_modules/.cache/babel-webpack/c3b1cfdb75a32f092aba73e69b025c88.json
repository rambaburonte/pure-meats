{"ast":null,"code":"import _asyncToGenerator from \"/Volumes/Drive/documents/projects/puremeats/App_code/User-Web-Version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/auth\";\nexport class ApiService {\n  constructor(http, fireAuth) {\n    this.http = http;\n    this.fireAuth = fireAuth;\n    this.baseUrl = '';\n    this.mediaURL = '';\n    this.baseUrl = environment.baseUrl;\n    this.mediaURL = environment.imageUrl;\n  }\n\n  signInWithPhoneNumber(recaptchaVerifier, phoneNumber) {\n    return new Promise((resolve, reject) => {\n      console.log(phoneNumber);\n      this.fireAuth.signInWithPhoneNumber(phoneNumber, recaptchaVerifier).then(confirmationResult => {\n        this.confirmationResult = confirmationResult;\n        resolve(confirmationResult);\n      }).catch(error => {\n        console.log(error);\n        reject('SMS not sent');\n      });\n    });\n  }\n\n  enterVerificationCode(code) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this.confirmationResult.confirm(code).then( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (result) {\n            console.log(result);\n            const user = result.user;\n            resolve(user);\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()).catch(error => {\n          reject(error.message);\n        });\n      });\n    })();\n  }\n\n  uploadFile(files) {\n    var formData = new FormData();\n    Array.from(files).forEach(f => formData.append('image', f));\n    return this.http.post(this.baseUrl + 'v1/' + 'uploadImage', formData);\n  }\n\n  JSON_to_URLEncoded(element, key, list) {\n    let new_list = list || [];\n\n    if (typeof element === 'object') {\n      for (let idx in element) {\n        this.JSON_to_URLEncoded(element[idx], key ? key + '[' + idx + ']' : idx, new_list);\n      }\n    } else {\n      new_list.push(key + '=' + encodeURIComponent(element));\n    }\n\n    return new_list.join('&');\n  }\n\n  post_public(url, body) {\n    return new Promise((resolve, reject) => {\n      const header = {\n        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n      };\n      const param = this.JSON_to_URLEncoded(body);\n      console.log(param);\n      this.http.post(this.baseUrl + url, param, header).subscribe(data => {\n        resolve(data);\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n\n  post_private(url, body) {\n    return new Promise((resolve, reject) => {\n      const header = {\n        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', `Bearer ${localStorage.getItem('token')}`)\n      };\n      const param = this.JSON_to_URLEncoded(body);\n      console.log(param);\n      this.http.post(this.baseUrl + url, param, header).subscribe(data => {\n        resolve(data);\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n\n  post_temp(url, body, temp) {\n    return new Promise((resolve, reject) => {\n      const header = {\n        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', `Bearer ${temp}`)\n      };\n      const param = this.JSON_to_URLEncoded(body);\n      console.log(param);\n      this.http.post(this.baseUrl + url, param, header).subscribe(data => {\n        resolve(data);\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n\n  get_public(url) {\n    return new Promise((resolve, reject) => {\n      const header = {\n        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n      };\n      this.http.get(this.baseUrl + url, header).subscribe(data => {\n        resolve(data);\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n\n  get_private(url) {\n    return new Promise((resolve, reject) => {\n      const header = {\n        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', `Bearer ${localStorage.getItem('token')}`)\n      };\n      this.http.get(this.baseUrl + url, header).subscribe(data => {\n        resolve(data);\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n\n  externalGet(url) {\n    return new Promise((resolve, reject) => {\n      const header = {\n        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n      };\n      this.http.get(url, header).subscribe(data => {\n        resolve(data);\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n\n  httpGet(url, key) {\n    const header = {\n      headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', `Bearer ${key}`)\n    };\n    return this.http.get(url, header);\n  }\n\n  externalPost(url, body, key) {\n    const header = {\n      headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', `Bearer ${key}`)\n    };\n    const order = this.JSON_to_URLEncoded(body);\n    console.log(order);\n    return this.http.post(url, order, header);\n  }\n\n}\n\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireAuth));\n};\n\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Volumes/Drive/documents/projects/puremeats/App_code/User-Web-Version/src/app/services/api.service.ts"],"names":["HttpHeaders","environment","i0","i1","i2","ApiService","constructor","http","fireAuth","baseUrl","mediaURL","imageUrl","signInWithPhoneNumber","recaptchaVerifier","phoneNumber","Promise","resolve","reject","console","log","then","confirmationResult","catch","error","enterVerificationCode","code","confirm","result","user","message","uploadFile","files","formData","FormData","Array","from","forEach","f","append","post","JSON_to_URLEncoded","element","key","list","new_list","idx","push","encodeURIComponent","join","post_public","url","body","header","headers","set","param","subscribe","data","post_private","localStorage","getItem","post_temp","temp","get_public","get","get_private","externalGet","httpGet","externalPost","order","ɵfac","ApiService_Factory","t","ɵɵinject","HttpClient","AngularFireAuth","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/auth\";\nexport class ApiService {\n    constructor(http, fireAuth) {\n        this.http = http;\n        this.fireAuth = fireAuth;\n        this.baseUrl = '';\n        this.mediaURL = '';\n        this.baseUrl = environment.baseUrl;\n        this.mediaURL = environment.imageUrl;\n    }\n    signInWithPhoneNumber(recaptchaVerifier, phoneNumber) {\n        return new Promise((resolve, reject) => {\n            console.log(phoneNumber);\n            this.fireAuth.signInWithPhoneNumber(phoneNumber, recaptchaVerifier)\n                .then((confirmationResult) => {\n                this.confirmationResult = confirmationResult;\n                resolve(confirmationResult);\n            }).catch((error) => {\n                console.log(error);\n                reject('SMS not sent');\n            });\n        });\n    }\n    async enterVerificationCode(code) {\n        return new Promise((resolve, reject) => {\n            this.confirmationResult.confirm(code).then(async (result) => {\n                console.log(result);\n                const user = result.user;\n                resolve(user);\n            }).catch((error) => {\n                reject(error.message);\n            });\n        });\n    }\n    uploadFile(files) {\n        var formData = new FormData();\n        Array.from(files).forEach(f => formData.append('image', f));\n        return this.http.post(this.baseUrl + 'v1/' + 'uploadImage', formData);\n    }\n    JSON_to_URLEncoded(element, key, list) {\n        let new_list = list || [];\n        if (typeof element === 'object') {\n            for (let idx in element) {\n                this.JSON_to_URLEncoded(element[idx], key ? key + '[' + idx + ']' : idx, new_list);\n            }\n        }\n        else {\n            new_list.push(key + '=' + encodeURIComponent(element));\n        }\n        return new_list.join('&');\n    }\n    post_public(url, body) {\n        return new Promise((resolve, reject) => {\n            const header = {\n                headers: new HttpHeaders()\n                    .set('Content-Type', 'application/x-www-form-urlencoded')\n            };\n            const param = this.JSON_to_URLEncoded(body);\n            console.log(param);\n            this.http.post(this.baseUrl + url, param, header).subscribe((data) => {\n                resolve(data);\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n    post_private(url, body) {\n        return new Promise((resolve, reject) => {\n            const header = {\n                headers: new HttpHeaders()\n                    .set('Content-Type', 'application/x-www-form-urlencoded')\n                    .set('Authorization', `Bearer ${localStorage.getItem('token')}`)\n            };\n            const param = this.JSON_to_URLEncoded(body);\n            console.log(param);\n            this.http.post(this.baseUrl + url, param, header).subscribe((data) => {\n                resolve(data);\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n    post_temp(url, body, temp) {\n        return new Promise((resolve, reject) => {\n            const header = {\n                headers: new HttpHeaders()\n                    .set('Content-Type', 'application/x-www-form-urlencoded')\n                    .set('Authorization', `Bearer ${temp}`)\n            };\n            const param = this.JSON_to_URLEncoded(body);\n            console.log(param);\n            this.http.post(this.baseUrl + url, param, header).subscribe((data) => {\n                resolve(data);\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n    get_public(url) {\n        return new Promise((resolve, reject) => {\n            const header = {\n                headers: new HttpHeaders()\n                    .set('Content-Type', 'application/x-www-form-urlencoded')\n            };\n            this.http.get(this.baseUrl + url, header).subscribe((data) => {\n                resolve(data);\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n    get_private(url) {\n        return new Promise((resolve, reject) => {\n            const header = {\n                headers: new HttpHeaders()\n                    .set('Content-Type', 'application/x-www-form-urlencoded')\n                    .set('Authorization', `Bearer ${localStorage.getItem('token')}`)\n            };\n            this.http.get(this.baseUrl + url, header).subscribe((data) => {\n                resolve(data);\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n    externalGet(url) {\n        return new Promise((resolve, reject) => {\n            const header = {\n                headers: new HttpHeaders()\n                    .set('Content-Type', 'application/x-www-form-urlencoded')\n            };\n            this.http.get(url, header).subscribe((data) => {\n                resolve(data);\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n    httpGet(url, key) {\n        const header = {\n            headers: new HttpHeaders()\n                .set('Content-Type', 'application/x-www-form-urlencoded')\n                .set('Authorization', `Bearer ${key}`)\n        };\n        return this.http.get(url, header);\n    }\n    externalPost(url, body, key) {\n        const header = {\n            headers: new HttpHeaders()\n                .set('Content-Type', 'application/x-www-form-urlencoded')\n                .set('Authorization', `Bearer ${key}`)\n        };\n        const order = this.JSON_to_URLEncoded(body);\n        console.log(order);\n        return this.http.post(url, order, header);\n    }\n}\nApiService.ɵfac = function ApiService_Factory(t) { return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireAuth)); };\nApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ApiService, factory: ApiService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}